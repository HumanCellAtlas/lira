swagger: '2.0'
info:
  title: "HCA DCP Pipeline Execution Service API"
  description: >
    Human Cell Atlas Data Coordination Platform Pipeline Execution Service ("Secondary-Analysis") API.


    The Pipeline Execution Service executes data processing pipelines containing analysis tasks performed on scientific data in the Data Coordination Platform (DCP). The outputs of these pipelines are used for scientific analysis and interpretation.


    **At this moment, this Swagger UI only covers the API definition of Lira, the workflow(pipeline) starter service of the HCA DCP Pipeline Execution Service, which starts workflows upon valid notifications.**

  version: '0.1.0'
host: {{API_DOMAIN_NAME}}
schemes:
  - https
produces:
  - application/json
tags:
- name: "Lira"
  externalDocs:
    description: "Learn more about the Lira service"
    url: "https://github.com/HumanCellAtlas/lira/wiki"
- name: "Pipeline Execution Service Information"
  description: "Information about the Pipeline Execution Service"
paths:
  /version:
    get:
      tags:
      - "Pipeline Execution Service Information"
      summary: "Returns the version of Lira and its dependencies"
      description: "Returns the versions of Lira and its dependencies"
      operationId: 'lira.api.version.get_version'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/VersionResponse'
        # Definition of all error statuses
        default:
          description: "Unexpected Error"
          schema:
            $ref: '#/definitions/Error'
  /health:
    get:
      tags:
      - "Pipeline Execution Service Information"
      summary: "Health check"
      description: "Health check"
      operationId: 'lira.api.health.get'
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/HealthCheckResponse'
        # Definition of all error statuses
        default:
          description: "Unexpected Error"
          schema:
            $ref: '#/definitions/Error'
  /notifications:
    post:
      tags:
      - "Lira"
      summary: "Listen for notifications and add to queue"
      description: |
        Listen for notifications and add them to a Google pub/sub queue.
        The notifications should contain HCA DCP Bundle information and be authenticated.
      operationId: 'lira.api.notifications.post'
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: false
          schema:
            $ref: '#/definitions/Notification'
      responses:
        200:
          description: "Notification received"
          schema:
            $ref: '#/definitions/NotificationResponse'
        # Definition of all error statuses
        default:
          description: "Unexpected Error"
          schema:
            $ref: '#/definitions/Error'
  /submissions:
    post:
      tags:
       - "Lira"
      summary: "Receives messages from queue and submits a workflow to Cromwell."
      description: |
              Receives messages from Google pub/sub topic, processes the HCA DCP
              Bundle information in the message, and submits an on-hold workflow
              to Cromwell.
      operationId: 'lira.api.notifications.receive_messages'
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: false
          schema:
            $ref: '#/definitions/PubSubMessage'
      responses:
        # Return code for notifications that cannot be processed (e.g bundle cannot be found)
        # Because they will not succeed on retry, return a 200 to google pub/sub
        200:
          description: "Notification received."
          schema:
            $ref: '#/definitions/CromwellSubmissionResponse'
        201:
          description: "Workflow submitted."
          schema:
            $ref: '#/definitions/CromwellSubmissionResponse'
        # Definition of all error statuses
        default:
          description: "Unexpected Error"
          schema:
            $ref: '#/definitions/Error'
definitions:
  Notification:
    type: object
    properties:
      match:
        $ref: '#/definitions/Match'
      attachments:
          $ref: '#/definitions/MultipleSampleIdAttachments'
      subscription_id:
        type: string
        description: "Subscription UUID correspdoning to this notification"
        format: uuid
      transaction_id:
        type: string
        description: "UUID representing this notification transaction"
        format: uuid
      es_query:
        type: object
        description: "ElasticSearch query content registered with the subscription"
        properties:
          query:
            type: object
    required:
      - subscription_id
      - transaction_id
      - match
  PubSubMessage:
    type: object
    properties:
      message:
        $ref: '#/definitions/Message'
  Message:
    type: object
    properties:
      data:
        type: string
  Match:
    type: object
    properties:
      bundle_uuid:
        type: string
        format: uuid
      bundle_version:
        type: string
        format: date-time
    required:
      - bundle_uuid
      - bundle_version
  MultipleSampleIdAttachments:
    type: object
    properties:
      sample_id:
        type: array
        items:
          type: string
          format: uuid
      project_shortname:
        type: string
      project_uuid:
        type: string
        format: uuid
  Error:
    type: object
    properties:
      detail:
        description: "Exception stacktrace, if any"
        type: string
        example: "An error occurred during processing your request!"
      status:
        description: "HTTP error code"
        type: integer
        format: int32
        example: 404
      title:
        description: "Human-readable error message"
        type: string
        example: "Page Not Found!"
    required:
      - title
      - status
  NotificationResponse:
    type: object
    properties:
      id:
        description: "ID of the Google pub/sub message"
        type: string
        example: "3fa85f64"
  CromwellSubmissionResponse:
    type: object
    properties:
      status:
        type: string
        example: "Submitted"
      id:
        description: "UUID of the submitted Cromwell workflow"
        type: string
        example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  HealthCheckResponse:
    type: object
    properties:
      status:
        type: string
        example: "healthy"
    required:
      - status
  VersionResponse:
    type: object
    properties:
      settings_info:
        type: object
        properties:
          cache_wdls:
            type: boolean
          cromwell_url:
            type: string
          data_store_url:
            type: string
          ingest_url:
            type: string
            format: uri
          launch_time:
            type: string
            format: date-time
          max_cromwell_retries:
            type: integer
          run_mode:
            type: string
            example: "dry_run"
          submit_and_hold_workflows:
            type: boolean
          use_caas:
            type: boolean
      version_info:
        type: object
        properties:
          cromwell_tools_version:
            type: string
            pattern: '(v)?([0-9]+)\.([0-9]+)\.([0-9]+)'
            example: "v1.0.0"
          lira_version:
            type: string
            pattern: '(v)?([0-9]+)\.([0-9]+)\.([0-9]+)'
            example: "v1.0.0"
          submit_wdl_version:
            type: string
            pattern: '(v)?([0-9]+)\.([0-9]+)\.([0-9]+)'
            example: "v1.0.0"
      workflow_info:
        type: object
        additionalProperties:
          type: object
          properties:
            subscription_id:
              type: string
              format: uuid
            version:
              type: string
